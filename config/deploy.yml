# Name of your application. Used to uniquely configure containers.
service: my-app

# Name of the container image.
image: nischalgenese/react

# Deploy to these servers.
servers:
  web:
    hosts:
      - 15.207.113.14
      - 13.235.0.30
    options:
      network: "kamal-network"

# Logging for containers
logging:
  driver: awslogs
  options:
    awslogs-region: ap-south-1
    awslogs-group: /application
    awslogs-create-group: true
    tag: "{{.Name}}-{{.ID}}"

# Credentials for your image host.
registry:
  username: nischalgenese
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
# env:
#   clear:
#     DB_HOST: 192.168.0.2
#   secret:
#     - RAILS_MASTER_KEY

# Use a different ssh user than root
ssh:
  user: ubuntu

# Configure builder setup.
# builder:
#   args:
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#     arch: amd64
#     host: ssh://app@192.168.0.1

# Use accessory services (secrets come from .env).
accessories:
  grafana:
    image: grafana/grafana-enterprise
    roles: 
      - web
    env:
      clear:
        GF_SERVER_ROOT_URL: https://grafana.valmikiai.com
        GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    labels:
      traefik.enable: true
      traefik.http.routers.grafana.rule: Host(`grafana.valmikiai.com`)
      traefik.http.routers.grafana.service: my-app-grafana@docker
    directories:
      - data/grafana:/var/lib/grafana
    options:
      user: 1000:1000
      network: "kamal-network"
  
  prometheus:
    image: prom/prometheus:latest
    roles: 
      - web
    port: 9090
    directories:
      - data/prometheus:/prometheus
    files:
      - infrastructure/prometheus/config.yml:/etc/prometheus/prometheus.yml
    options:
      user: 1000:1000
      network: "kamal-network"
    cmd: --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus --storage.tsdb.retention.time=30d

# Configure custom arguments for Traefik. Be sure to reboot traefik when you modify it.
traefik:
  image: traefik:v3.0.0-beta5
  options:
    publish:
      - "8080:8080"
    volume: "/letsencrypt/acme.json:/letsencrypt/acme.json"
    network: "kamal-network"
  args:
    api.dashboard: true
    api.insecure: true
    log.level: INFO
    accesslog.format: json
    accesslog.filters.statusCodes: "400-599"
    accesslog.filters.retryAttempts: true
    accesslog.filters.minDuration: 101ms

    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"
  labels:
    traefik.http.routers.dashboard.rule: Host(`traefik.valmikiai.com`)
    traefik.http.routers.dashboard.service: api@internal

# Configure a custom healthcheck (default is /up on port 3000)
healthcheck:
  path: /
  port: 4173

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# If your app is using the Sprockets gem, ensure it sets `config.assets.manifest`.
# See https://github.com/basecamp/kamal/issues/626 for details
#
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
